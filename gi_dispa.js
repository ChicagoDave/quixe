GiDispa = function() {

/* A table of the Glk classes, and their index numbers. This is derived from
   gi_dispa.c, although it's too simple to bother auto-generating.
*/
var class_defs = {
    0: 'window',
    1: 'stream',
    2: 'fileref',
    3: 'schannel',
};

/* FuncSpec is a data representation of a Glk function's prototype.
   The table of FuncSpecs is generated, ultimately, from the Glk
   prototype description strings in gi_dispa.c.
*/
function FuncSpec(id, name, proto) {
    this.id = id;
    this.name = name;
    this.proto = proto;
}

/* A bunch of data classes, used by FuncSpec. */

function Prototype(args, retarg) {
    this.args = args;
    this.retarg = retarg;
}
function ArgString() { 
    this.macro = 'Byte';
    this.refsize = 1;
}
function ArgUnicode() { 
    this.macro = 'Word';
    this.refsize = 4;
}
function ArgChar(signed) {
    this.signed = signed;
    this.macro = 'Byte';
    this.refsize = 1;
}
function ArgInt(signed) {
    this.signed = signed;
    this.macro = 'Word';
    this.refsize = 4;
}
function ArgClass(name) {
    this.name = name;
    this.macro = 'Word';
    this.refsize = 4;
}
function ArgStruct(form) {
    this.form = form;
}
function ArgRef(arg, passin, passout, nonnull) {
    this.arg = arg;
    this.passin = passin;
    this.passout = passout;
    this.nonnull = nonnull;
}
function ArgArray(arg, retained, passin, passout, nonnull) {
    this.arg = arg;
    this.retained = retained;
    this.passin = passin;
    this.passout = passout;
    this.nonnull = nonnull;
}

// The following table is auto-generated by parse_dispatch.py.
var proto_map = {
// 1 exit 0:
1 : new FuncSpec(1, "exit", new Prototype([], null)),
// 3 tick 0:
3 : new FuncSpec(3, "tick", new Prototype([], null)),
// 4 gestalt 3IuIu:Iu
4 : new FuncSpec(4, "gestalt", new Prototype([new ArgInt(false), new ArgInt(false)], new ArgRef(new ArgInt(false), false, true, true))),
// 5 gestalt_ext 4IuIu&#Iu:Iu
5 : new FuncSpec(5, "gestalt_ext", new Prototype([new ArgInt(false), new ArgInt(false), new ArgArray(new ArgInt(false), false, true, true, false)], new ArgRef(new ArgInt(false), false, true, true))),
// 32 window_iterate 3Qa<Iu:Qa
32 : new FuncSpec(32, "window_iterate", new Prototype([new ArgClass("window"), new ArgRef(new ArgInt(false), false, true, false)], new ArgRef(new ArgClass("window"), false, true, true))),
// 33 window_get_rock 2Qa:Iu
33 : new FuncSpec(33, "window_get_rock", new Prototype([new ArgClass("window")], new ArgRef(new ArgInt(false), false, true, true))),
// 34 window_get_root 1:Qa
34 : new FuncSpec(34, "window_get_root", new Prototype([], new ArgRef(new ArgClass("window"), false, true, true))),
// 35 window_open 6QaIuIuIuIu:Qa
35 : new FuncSpec(35, "window_open", new Prototype([new ArgClass("window"), new ArgInt(false), new ArgInt(false), new ArgInt(false), new ArgInt(false)], new ArgRef(new ArgClass("window"), false, true, true))),
// 36 window_close 2Qa<[2IuIu]:
36 : new FuncSpec(36, "window_close", new Prototype([new ArgClass("window"), new ArgRef(new ArgStruct(new Prototype([new ArgInt(false), new ArgInt(false)], null)), false, true, false)], null)),
// 37 window_get_size 3Qa<Iu<Iu:
37 : new FuncSpec(37, "window_get_size", new Prototype([new ArgClass("window"), new ArgRef(new ArgInt(false), false, true, false), new ArgRef(new ArgInt(false), false, true, false)], null)),
// 38 window_set_arrangement 4QaIuIuQa:
38 : new FuncSpec(38, "window_set_arrangement", new Prototype([new ArgClass("window"), new ArgInt(false), new ArgInt(false), new ArgClass("window")], null)),
// 39 window_get_arrangement 4Qa<Iu<Iu<Qa:
39 : new FuncSpec(39, "window_get_arrangement", new Prototype([new ArgClass("window"), new ArgRef(new ArgInt(false), false, true, false), new ArgRef(new ArgInt(false), false, true, false), new ArgRef(new ArgClass("window"), false, true, false)], null)),
// 40 window_get_type 2Qa:Iu
40 : new FuncSpec(40, "window_get_type", new Prototype([new ArgClass("window")], new ArgRef(new ArgInt(false), false, true, true))),
// 41 window_get_parent 2Qa:Qa
41 : new FuncSpec(41, "window_get_parent", new Prototype([new ArgClass("window")], new ArgRef(new ArgClass("window"), false, true, true))),
// 42 window_clear 1Qa:
42 : new FuncSpec(42, "window_clear", new Prototype([new ArgClass("window")], null)),
// 43 window_move_cursor 3QaIuIu:
43 : new FuncSpec(43, "window_move_cursor", new Prototype([new ArgClass("window"), new ArgInt(false), new ArgInt(false)], null)),
// 44 window_get_stream 2Qa:Qb
44 : new FuncSpec(44, "window_get_stream", new Prototype([new ArgClass("window")], new ArgRef(new ArgClass("stream"), false, true, true))),
// 45 window_set_echo_stream 2QaQb:
45 : new FuncSpec(45, "window_set_echo_stream", new Prototype([new ArgClass("window"), new ArgClass("stream")], null)),
// 46 window_get_echo_stream 2Qa:Qb
46 : new FuncSpec(46, "window_get_echo_stream", new Prototype([new ArgClass("window")], new ArgRef(new ArgClass("stream"), false, true, true))),
// 47 set_window 1Qa:
47 : new FuncSpec(47, "set_window", new Prototype([new ArgClass("window")], null)),
// 48 window_get_sibling 2Qa:Qa
48 : new FuncSpec(48, "window_get_sibling", new Prototype([new ArgClass("window")], new ArgRef(new ArgClass("window"), false, true, true))),
// 64 stream_iterate 3Qb<Iu:Qb
64 : new FuncSpec(64, "stream_iterate", new Prototype([new ArgClass("stream"), new ArgRef(new ArgInt(false), false, true, false)], new ArgRef(new ArgClass("stream"), false, true, true))),
// 65 stream_get_rock 2Qb:Iu
65 : new FuncSpec(65, "stream_get_rock", new Prototype([new ArgClass("stream")], new ArgRef(new ArgInt(false), false, true, true))),
// 66 stream_open_file 4QcIuIu:Qb
66 : new FuncSpec(66, "stream_open_file", new Prototype([new ArgClass("fileref"), new ArgInt(false), new ArgInt(false)], new ArgRef(new ArgClass("stream"), false, true, true))),
// 67 stream_open_memory 4&+#!CnIuIu:Qb
67 : new FuncSpec(67, "stream_open_memory", new Prototype([new ArgArray(new ArgChar(null), true, true, true, true), new ArgInt(false), new ArgInt(false)], new ArgRef(new ArgClass("stream"), false, true, true))),
// 68 stream_close 2Qb<[2IuIu]:
68 : new FuncSpec(68, "stream_close", new Prototype([new ArgClass("stream"), new ArgRef(new ArgStruct(new Prototype([new ArgInt(false), new ArgInt(false)], null)), false, true, false)], null)),
// 69 stream_set_position 3QbIsIu:
69 : new FuncSpec(69, "stream_set_position", new Prototype([new ArgClass("stream"), new ArgInt(true), new ArgInt(false)], null)),
// 70 stream_get_position 2Qb:Iu
70 : new FuncSpec(70, "stream_get_position", new Prototype([new ArgClass("stream")], new ArgRef(new ArgInt(false), false, true, true))),
// 71 stream_set_current 1Qb:
71 : new FuncSpec(71, "stream_set_current", new Prototype([new ArgClass("stream")], null)),
// 72 stream_get_current 1:Qb
72 : new FuncSpec(72, "stream_get_current", new Prototype([], new ArgRef(new ArgClass("stream"), false, true, true))),
// 96 fileref_create_temp 3IuIu:Qc
96 : new FuncSpec(96, "fileref_create_temp", new Prototype([new ArgInt(false), new ArgInt(false)], new ArgRef(new ArgClass("fileref"), false, true, true))),
// 97 fileref_create_by_name 4IuSIu:Qc
97 : new FuncSpec(97, "fileref_create_by_name", new Prototype([new ArgInt(false), new ArgString(), new ArgInt(false)], new ArgRef(new ArgClass("fileref"), false, true, true))),
// 98 fileref_create_by_prompt 4IuIuIu:Qc
98 : new FuncSpec(98, "fileref_create_by_prompt", new Prototype([new ArgInt(false), new ArgInt(false), new ArgInt(false)], new ArgRef(new ArgClass("fileref"), false, true, true))),
// 99 fileref_destroy 1Qc:
99 : new FuncSpec(99, "fileref_destroy", new Prototype([new ArgClass("fileref")], null)),
// 100 fileref_iterate 3Qc<Iu:Qc
100 : new FuncSpec(100, "fileref_iterate", new Prototype([new ArgClass("fileref"), new ArgRef(new ArgInt(false), false, true, false)], new ArgRef(new ArgClass("fileref"), false, true, true))),
// 101 fileref_get_rock 2Qc:Iu
101 : new FuncSpec(101, "fileref_get_rock", new Prototype([new ArgClass("fileref")], new ArgRef(new ArgInt(false), false, true, true))),
// 102 fileref_delete_file 1Qc:
102 : new FuncSpec(102, "fileref_delete_file", new Prototype([new ArgClass("fileref")], null)),
// 103 fileref_does_file_exist 2Qc:Iu
103 : new FuncSpec(103, "fileref_does_file_exist", new Prototype([new ArgClass("fileref")], new ArgRef(new ArgInt(false), false, true, true))),
// 104 fileref_create_from_fileref 4IuQcIu:Qc
104 : new FuncSpec(104, "fileref_create_from_fileref", new Prototype([new ArgInt(false), new ArgClass("fileref"), new ArgInt(false)], new ArgRef(new ArgClass("fileref"), false, true, true))),
// 128 put_char 1Cu:
128 : new FuncSpec(128, "put_char", new Prototype([new ArgChar(false)], null)),
// 129 put_char_stream 2QbCu:
129 : new FuncSpec(129, "put_char_stream", new Prototype([new ArgClass("stream"), new ArgChar(false)], null)),
// 130 put_string 1S:
130 : new FuncSpec(130, "put_string", new Prototype([new ArgString()], null)),
// 131 put_string_stream 2QbS:
131 : new FuncSpec(131, "put_string_stream", new Prototype([new ArgClass("stream"), new ArgString()], null)),
// 132 put_buffer 1>+#Cn:
132 : new FuncSpec(132, "put_buffer", new Prototype([new ArgArray(new ArgChar(null), false, true, false, true)], null)),
// 133 put_buffer_stream 2Qb>+#Cn:
133 : new FuncSpec(133, "put_buffer_stream", new Prototype([new ArgClass("stream"), new ArgArray(new ArgChar(null), false, true, false, true)], null)),
// 134 set_style 1Iu:
134 : new FuncSpec(134, "set_style", new Prototype([new ArgInt(false)], null)),
// 135 set_style_stream 2QbIu:
135 : new FuncSpec(135, "set_style_stream", new Prototype([new ArgClass("stream"), new ArgInt(false)], null)),
// 144 get_char_stream 2Qb:Is
144 : new FuncSpec(144, "get_char_stream", new Prototype([new ArgClass("stream")], new ArgRef(new ArgInt(true), false, true, true))),
// 145 get_line_stream 3Qb<+#Cn:Iu
145 : new FuncSpec(145, "get_line_stream", new Prototype([new ArgClass("stream"), new ArgArray(new ArgChar(null), false, false, true, true)], new ArgRef(new ArgInt(false), false, true, true))),
// 146 get_buffer_stream 3Qb<+#Cn:Iu
146 : new FuncSpec(146, "get_buffer_stream", new Prototype([new ArgClass("stream"), new ArgArray(new ArgChar(null), false, false, true, true)], new ArgRef(new ArgInt(false), false, true, true))),
// 160 char_to_lower 2Cu:Cu
160 : new FuncSpec(160, "char_to_lower", new Prototype([new ArgChar(false)], new ArgRef(new ArgChar(false), false, true, true))),
// 161 char_to_upper 2Cu:Cu
161 : new FuncSpec(161, "char_to_upper", new Prototype([new ArgChar(false)], new ArgRef(new ArgChar(false), false, true, true))),
// 176 stylehint_set 4IuIuIuIs:
176 : new FuncSpec(176, "stylehint_set", new Prototype([new ArgInt(false), new ArgInt(false), new ArgInt(false), new ArgInt(true)], null)),
// 177 stylehint_clear 3IuIuIu:
177 : new FuncSpec(177, "stylehint_clear", new Prototype([new ArgInt(false), new ArgInt(false), new ArgInt(false)], null)),
// 178 style_distinguish 4QaIuIu:Iu
178 : new FuncSpec(178, "style_distinguish", new Prototype([new ArgClass("window"), new ArgInt(false), new ArgInt(false)], new ArgRef(new ArgInt(false), false, true, true))),
// 179 style_measure 5QaIuIu<Iu:Iu
179 : new FuncSpec(179, "style_measure", new Prototype([new ArgClass("window"), new ArgInt(false), new ArgInt(false), new ArgRef(new ArgInt(false), false, true, false)], new ArgRef(new ArgInt(false), false, true, true))),
// 192 select 1<+[4IuQaIuIu]:
192 : new FuncSpec(192, "select", new Prototype([new ArgRef(new ArgStruct(new Prototype([new ArgInt(false), new ArgClass("window"), new ArgInt(false), new ArgInt(false)], null)), false, true, true)], null)),
// 193 select_poll 1<+[4IuQaIuIu]:
193 : new FuncSpec(193, "select_poll", new Prototype([new ArgRef(new ArgStruct(new Prototype([new ArgInt(false), new ArgClass("window"), new ArgInt(false), new ArgInt(false)], null)), false, true, true)], null)),
// 208 request_line_event 3Qa&+#!CnIu:
208 : new FuncSpec(208, "request_line_event", new Prototype([new ArgClass("window"), new ArgArray(new ArgChar(null), true, true, true, true), new ArgInt(false)], null)),
// 209 cancel_line_event 2Qa<[4IuQaIuIu]:
209 : new FuncSpec(209, "cancel_line_event", new Prototype([new ArgClass("window"), new ArgRef(new ArgStruct(new Prototype([new ArgInt(false), new ArgClass("window"), new ArgInt(false), new ArgInt(false)], null)), false, true, false)], null)),
// 210 request_char_event 1Qa:
210 : new FuncSpec(210, "request_char_event", new Prototype([new ArgClass("window")], null)),
// 211 cancel_char_event 1Qa:
211 : new FuncSpec(211, "cancel_char_event", new Prototype([new ArgClass("window")], null)),
// 212 request_mouse_event 1Qa:
212 : new FuncSpec(212, "request_mouse_event", new Prototype([new ArgClass("window")], null)),
// 213 cancel_mouse_event 1Qa:
213 : new FuncSpec(213, "cancel_mouse_event", new Prototype([new ArgClass("window")], null)),
// 214 request_timer_events 1Iu:
214 : new FuncSpec(214, "request_timer_events", new Prototype([new ArgInt(false)], null)),
// 224 image_get_info 4Iu<Iu<Iu:Iu
224 : new FuncSpec(224, "image_get_info", new Prototype([new ArgInt(false), new ArgRef(new ArgInt(false), false, true, false), new ArgRef(new ArgInt(false), false, true, false)], new ArgRef(new ArgInt(false), false, true, true))),
// 225 image_draw 5QaIuIsIs:Iu
225 : new FuncSpec(225, "image_draw", new Prototype([new ArgClass("window"), new ArgInt(false), new ArgInt(true), new ArgInt(true)], new ArgRef(new ArgInt(false), false, true, true))),
// 226 image_draw_scaled 7QaIuIsIsIuIu:Iu
226 : new FuncSpec(226, "image_draw_scaled", new Prototype([new ArgClass("window"), new ArgInt(false), new ArgInt(true), new ArgInt(true), new ArgInt(false), new ArgInt(false)], new ArgRef(new ArgInt(false), false, true, true))),
// 232 window_flow_break 1Qa:
232 : new FuncSpec(232, "window_flow_break", new Prototype([new ArgClass("window")], null)),
// 233 window_erase_rect 5QaIsIsIuIu:
233 : new FuncSpec(233, "window_erase_rect", new Prototype([new ArgClass("window"), new ArgInt(true), new ArgInt(true), new ArgInt(false), new ArgInt(false)], null)),
// 234 window_fill_rect 6QaIuIsIsIuIu:
234 : new FuncSpec(234, "window_fill_rect", new Prototype([new ArgClass("window"), new ArgInt(false), new ArgInt(true), new ArgInt(true), new ArgInt(false), new ArgInt(false)], null)),
// 235 window_set_background_color 2QaIu:
235 : new FuncSpec(235, "window_set_background_color", new Prototype([new ArgClass("window"), new ArgInt(false)], null)),
// 240 schannel_iterate 3Qd<Iu:Qd
240 : new FuncSpec(240, "schannel_iterate", new Prototype([new ArgClass("schannel"), new ArgRef(new ArgInt(false), false, true, false)], new ArgRef(new ArgClass("schannel"), false, true, true))),
// 241 schannel_get_rock 2Qd:Iu
241 : new FuncSpec(241, "schannel_get_rock", new Prototype([new ArgClass("schannel")], new ArgRef(new ArgInt(false), false, true, true))),
// 242 schannel_create 2Iu:Qd
242 : new FuncSpec(242, "schannel_create", new Prototype([new ArgInt(false)], new ArgRef(new ArgClass("schannel"), false, true, true))),
// 243 schannel_destroy 1Qd:
243 : new FuncSpec(243, "schannel_destroy", new Prototype([new ArgClass("schannel")], null)),
// 248 schannel_play 3QdIu:Iu
248 : new FuncSpec(248, "schannel_play", new Prototype([new ArgClass("schannel"), new ArgInt(false)], new ArgRef(new ArgInt(false), false, true, true))),
// 249 schannel_play_ext 5QdIuIuIu:Iu
249 : new FuncSpec(249, "schannel_play_ext", new Prototype([new ArgClass("schannel"), new ArgInt(false), new ArgInt(false), new ArgInt(false)], new ArgRef(new ArgInt(false), false, true, true))),
// 250 schannel_stop 1Qd:
250 : new FuncSpec(250, "schannel_stop", new Prototype([new ArgClass("schannel")], null)),
// 251 schannel_set_volume 2QdIu:
251 : new FuncSpec(251, "schannel_set_volume", new Prototype([new ArgClass("schannel"), new ArgInt(false)], null)),
// 252 sound_load_hint 2IuIu:
252 : new FuncSpec(252, "sound_load_hint", new Prototype([new ArgInt(false), new ArgInt(false)], null)),
// 256 set_hyperlink 1Iu:
256 : new FuncSpec(256, "set_hyperlink", new Prototype([new ArgInt(false)], null)),
// 257 set_hyperlink_stream 2QbIu:
257 : new FuncSpec(257, "set_hyperlink_stream", new Prototype([new ArgClass("stream"), new ArgInt(false)], null)),
// 258 request_hyperlink_event 1Qa:
258 : new FuncSpec(258, "request_hyperlink_event", new Prototype([new ArgClass("window")], null)),
// 259 cancel_hyperlink_event 1Qa:
259 : new FuncSpec(259, "cancel_hyperlink_event", new Prototype([new ArgClass("window")], null)),
// 288 buffer_to_lower_case_uni 3&+#IuIu:Iu
288 : new FuncSpec(288, "buffer_to_lower_case_uni", new Prototype([new ArgArray(new ArgInt(false), false, true, true, true), new ArgInt(false)], new ArgRef(new ArgInt(false), false, true, true))),
// 289 buffer_to_upper_case_uni 3&+#IuIu:Iu
289 : new FuncSpec(289, "buffer_to_upper_case_uni", new Prototype([new ArgArray(new ArgInt(false), false, true, true, true), new ArgInt(false)], new ArgRef(new ArgInt(false), false, true, true))),
// 290 buffer_to_title_case_uni 4&+#IuIuIu:Iu
290 : new FuncSpec(290, "buffer_to_title_case_uni", new Prototype([new ArgArray(new ArgInt(false), false, true, true, true), new ArgInt(false), new ArgInt(false)], new ArgRef(new ArgInt(false), false, true, true))),
// 296 put_char_uni 1Iu:
296 : new FuncSpec(296, "put_char_uni", new Prototype([new ArgInt(false)], null)),
// 297 put_string_uni 1U:
297 : new FuncSpec(297, "put_string_uni", new Prototype([new ArgUnicode()], null)),
// 298 put_buffer_uni 1>+#Iu:
298 : new FuncSpec(298, "put_buffer_uni", new Prototype([new ArgArray(new ArgInt(false), false, true, false, true)], null)),
// 299 put_char_stream_uni 2QbIu:
299 : new FuncSpec(299, "put_char_stream_uni", new Prototype([new ArgClass("stream"), new ArgInt(false)], null)),
// 300 put_string_stream_uni 2QbU:
300 : new FuncSpec(300, "put_string_stream_uni", new Prototype([new ArgClass("stream"), new ArgUnicode()], null)),
// 301 put_buffer_stream_uni 2Qb>+#Iu:
301 : new FuncSpec(301, "put_buffer_stream_uni", new Prototype([new ArgClass("stream"), new ArgArray(new ArgInt(false), false, true, false, true)], null)),
// 304 get_char_stream_uni 2Qb:Is
304 : new FuncSpec(304, "get_char_stream_uni", new Prototype([new ArgClass("stream")], new ArgRef(new ArgInt(true), false, true, true))),
// 305 get_buffer_stream_uni 3Qb<+#Iu:Iu
305 : new FuncSpec(305, "get_buffer_stream_uni", new Prototype([new ArgClass("stream"), new ArgArray(new ArgInt(false), false, false, true, true)], new ArgRef(new ArgInt(false), false, true, true))),
// 306 get_line_stream_uni 3Qb<+#Iu:Iu
306 : new FuncSpec(306, "get_line_stream_uni", new Prototype([new ArgClass("stream"), new ArgArray(new ArgInt(false), false, false, true, true)], new ArgRef(new ArgInt(false), false, true, true))),
// 312 stream_open_file_uni 4QcIuIu:Qb
312 : new FuncSpec(312, "stream_open_file_uni", new Prototype([new ArgClass("fileref"), new ArgInt(false), new ArgInt(false)], new ArgRef(new ArgClass("stream"), false, true, true))),
// 313 stream_open_memory_uni 4&+#!IuIuIu:Qb
313 : new FuncSpec(313, "stream_open_memory_uni", new Prototype([new ArgArray(new ArgInt(false), true, true, true, true), new ArgInt(false), new ArgInt(false)], new ArgRef(new ArgClass("stream"), false, true, true))),
// 320 request_char_event_uni 1Qa:
320 : new FuncSpec(320, "request_char_event_uni", new Prototype([new ArgClass("window")], null)),
// 321 request_line_event_uni 3Qa&+#!IuIu:
321 : new FuncSpec(321, "request_line_event_uni", new Prototype([new ArgClass("window"), new ArgArray(new ArgInt(false), true, true, true, true), new ArgInt(false)], null)),
};
// End of auto-generated table.



/* Log the message in the browser's error log, if it has one. (This shows
   up in Safari, in Opera, and in Firefox if you have Firebug installed.)
*/
function qlog(msg) {
    if (window.console && console.log)
        console.log(msg);
    else if (window.opera && opera.postError)
        opera.postError(msg);
}

//### retain_array

/* Convert one simple value (int, char, string, class) from a Glulx
   value (32-bit unsigned integer) into a Glk library value.
*/
function convert_arg(arg, passin, val) {
    if (arg instanceof ArgInt) {
        if (passin) {
            if (!arg.signed)
                return val;
            else
                return val + ' & 0xFFFFFFFF';
        }
        else {
            return '0';
        }
    }
    if (arg instanceof ArgChar) {
        if (passin) {
            if (!arg.signed)
                return val + ' & 0xFF';
            else
                return 'cast_signed_char('+val+')'
        }
        else {
            return '0';
        }
    }
    if (arg instanceof ArgClass) {
        if (passin) {
            return 'class_map.'+arg.name+'['+val+']';
        }
        else {
            return 'null';
        }
    }
    return '???';
}

/* Convert one simple value (int, char, string, class) from a Glk library 
   value into a Glulx value (32-bit unsigned integer).
*/
function unconvert_arg(arg, val) {
    if (arg instanceof ArgInt) {
        return val + ' >>> 0';
    }
    if (arg instanceof ArgChar) {
        if (!arg.signed)
            return val + ' & 0xFF';
        else
            return 'uncast_signed_char('+val+')'
    }
    if (arg instanceof ArgClass) {
        return val+'.disprock';
    }
    return '???';
}

/* Convert a Glulx value into a signed char value. Not a Javascript
   string, but the bastardized C notion used by the Glk library:
   a number from -128 to 127.
*/
function cast_signed_char(val) {
    val = val & 0xFF;
    if (val & 0x80)
        val -= 0x100;
    return val;
}

/* The converse. */
function uncast_signed_char(val) {
    val = val & 0xFF;
    if (val & 0x80)
        val += 0xFFFFFF00;
    return val;
}

/* Convert a FuncSpec object into a Javascript function. The function,
   when called, should be passed exactly one argument: an array of
   Glulx values, taken straight from the VM. It will return a Glulx
   value (zero, if the Glk call does not return a value).

   (This function is for internal use. The VM should call get_function(),
   which caches built functions.)
*/
function build_function(func) {
    var ix, jx;
    var form, retarg, argpos, argjoin, subargs;
    var arg, refarg, tmpvar, val, retval, ls;

    /* We will accumulate a list of Javascript lines in the out array. */
    var out = [];
    var locals = {};

    out.push('// no local vars');
    out.push('// ' + func.id + ': ' + func.name);
    form = func.proto;
    retarg = null;
    if (form.retarg)
        retarg = form.retarg.arg;

    /* Load the argument values into local variables, for use in the
       call. For array, struct, and reference arguments, we also need
       to load up the referred-to values. */

    argpos = 0;
    argjoin = [];
    for (ix=0; ix<form.args.length; ix++) {
        arg = form.args[ix];
        tmpvar = 'glka'+ix;
        argjoin.push(tmpvar);
        locals[tmpvar] = true;
        if ((arg instanceof ArgInt)
            || (arg instanceof ArgChar)
            || (arg instanceof ArgClass)) {
            val = convert_arg(arg, true, 'callargs['+argpos+']');
            out.push(tmpvar + ' = ' + val + ';');
            argpos += 1;
        }
        else if (arg instanceof ArgRef) {
            refarg = arg.arg;
            out.push('if (callargs['+argpos+'] == 0) {');
            if (arg.nonnull) 
                out.push('  throw("glk '+func.name+': null argument");');
            else
                out.push('  '+tmpvar+' = null;');
            out.push('} else {');
            if ((refarg instanceof ArgInt)
                || (refarg instanceof ArgChar)
                || (refarg instanceof ArgClass)) {
                out.push('  '+tmpvar+' = Glk.RefBox();');
                val = convert_arg(refarg, arg.passin, 'VM.ReadWord(callargs['+argpos+'])');
                out.push('  '+tmpvar+'.set_value('+val+');');
            }
            else if (refarg instanceof ArgStruct) {
                subargs = refarg.form.args;
                out.push('  '+tmpvar+' = Glk.RefStruct('+subargs.length+');');
                for (jx=0; jx<subargs.length; jx++) {
                    val = convert_arg(subargs[jx], arg.passin, 'VM.ReadField(callargs['+argpos+'], '+jx+')');
                    out.push('  '+tmpvar+'.push_field('+val+');');
                }
            }
            else {
                throw('buildfunc: unsupported refarg type: ' + func.name);
            }
            out.push('}');
            argpos += 1;
        }
        else if (arg instanceof ArgArray) {
            locals['glklen'] = true;
            refarg = arg.arg;
            out.push('if (callargs['+argpos+'] == 0) {');
            if (arg.nonnull)
                out.push('  throw("glk '+func.name+': null argument");');
            else
                out.push('  '+tmpvar+' = null;');
            out.push('} else {');
            out.push('  glklen = callargs['+(argpos+1)+'];');
            out.push('  '+tmpvar+' = Array(glklen);');
            if (arg.passin) {
                locals['ix'] = true;
                locals['jx'] = true;
                out.push('  for (ix=0, jx=callargs['+argpos+']; ix<glklen; ix++, jx+='+refarg.refsize+') {');
                val = convert_arg(refarg, true, 'VM.Read'+refarg.macro+'(jx)');
                out.push('    '+tmpvar+'[ix] = '+val+';');
                out.push('  }');
            }
            if (arg.retained)
                out.push('  retain_array('+tmpvar+', glklen, '+refarg.refsize+', '+(refarg.signed?'1':'0')+');');
            out.push('}');
            argpos += 2;
        }
        else if ((arg instanceof ArgString) || (arg instanceof ArgUnicode)) {
            out.push(tmpvar+' = Array();');
            out.push('for (jx=callargs['+argpos+']; true; jx+='+arg.refsize+') {');
            out.push('  ix = VM.Read'+arg.macro+'(jx);');
            out.push('  if (ix == 0) break;');
            out.push('  '+tmpvar+'.push(ix);');
            out.push('}');
            argpos += 1;
        }
        else {
            throw('buildfunc: unsupported arg type: ' + func.name);
        }
    }

    /* Perform the call itself. */

    if (retarg) {
        locals['glkret'] = true;
        retval = 'glkret = ';
    }
    else {
        retval = '';
    }
    out.push(retval + 'Glk.' + func.name + '(' + argjoin.join(', ') + ');');

    /* For reference/array/struct arguments, unload the referred-to values
       back out to the VM. */

    argpos = 0;
    for (ix=0; ix<form.args.length; ix++) {
        arg = form.args[ix];
        tmpvar = 'glka'+ix;
        if ((arg instanceof ArgInt)
            || (arg instanceof ArgChar)
            || (arg instanceof ArgClass)) {
            argpos += 1;
        }
        else if (arg instanceof ArgRef) {
            refarg = arg.arg;
            if (arg.passout) {
                out.push('if ('+tmpvar+') {');
                if ((refarg instanceof ArgInt)
                    || (refarg instanceof ArgChar)
                    || (refarg instanceof ArgClass)) {
                    val = unconvert_arg(refarg, tmpvar+'.get_value()');
                    out.push('  VM.WriteWord(callargs['+argpos+'], '+val+');');
                }
                else if (refarg instanceof ArgStruct) {
                    subargs = refarg.form.args;
                    for (jx=0; jx<subargs.length; jx++) {
                        val = unconvert_arg(subargs[jx], tmpvar+'.get_field('+jx+')');
                        out.push('  VM.WriteField(callargs['+argpos+'], '+jx+', '+val+');');
                    }
                }
                else {
                    throw('buildfunc: unsupported refarg type: ' + func.name);
                }
                out.push('}');
            }
            argpos += 1;
        }
        else if (arg instanceof ArgArray) {
            refarg = arg.arg;
            if (arg.passout && !arg.retained) {
                out.push('if ('+tmpvar+') {');
                locals['ix'] = true;
                locals['jx'] = true;
                out.push('  for (ix=0, jx=callargs['+argpos+']; ix<glklen; ix++, jx+='+refarg.refsize+') {');
                val = unconvert_arg(refarg, tmpvar+'[ix]');
                out.push('    VM.Write'+refarg.macro+'(jx, '+val+')');
                out.push('  }');
                out.push('}');
            }
            argpos += 2;
        }
        else if ((arg instanceof ArgString) || (arg instanceof ArgUnicode)) {
            argpos += 1;
        }
        else {
            throw('buildfunc: unsupported arg type: ' + func.name);
        }
    }

    /* Return the return value. */

    if (retarg) {
        val = unconvert_arg(retarg, 'glkret');
        out.push('return '+val+';');
    }
    else {
        out.push('return 0;');
    }

    /* Add a line to the beginning which lists all the locals we used. */

    ls = [];
    for (val in locals)
        ls.push(val);
    if (ls.length)
        out[0] = 'var ' + ls.join(', ') + ';';
    val = out.join('\n');

    /* Compile the function and return it. */

    eval('function _func(callargs) {\n' + val + '\n}');
    return _func;
}

/* Cache of all the dispatch functions we've compiled. */
var function_map = {};

/* Given a Glk selector number, return the dispatch function for it.

   The function, when called, should be passed exactly one argument: 
   an array of Glulx values, taken straight from the VM. It will return
   a Glulx value (zero, if the Glk call does not return a value).

   If the selector number is not recognized, this throws an exception.
*/
function get_function(id) {
    var proto;
    var func = function_map[id];
    if (func === undefined) {
        proto = proto_map[id];
        if (proto === undefined)
            throw('dispatch: unknown Glk function: ' + id);
        func = build_function(proto);
        function_map[id] = func;
    }
    return func;
}

/* Table of tables of registered Glk objects. class_map['window'] is the
   table of windows, and so on.
*/
var class_map = {};
/* Source of numeric ids that are used to identify Glk objects. */
var last_used_id;

function class_register(clas, obj) {
    if (obj.disprock)
        throw('class_register: object is already registered');
    obj.disprock = last_used_id;
    last_used_id++;

    class_map[clas][obj.disprock] = obj;
}

function class_unregister(clas, obj) {
    if (obj.disprock == 0 || class_map[clas][obj.disprock] === undefined)
        throw('class_unregister: object is not registered');
    
    delete class_map[clas][obj.disprock];
    obj.disprock = undefined;
}

function init_module() {
    var ix, key;

    last_used_id = 1 + Math.round(Math.random() * 1000);

    for (ix in class_defs) {
        key = class_defs[ix];
        class_map[key] = {};
    }
};

init_module();
return {
    get_function: get_function,
    class_register: class_register,
    class_unregister: class_unregister,
};

}();
